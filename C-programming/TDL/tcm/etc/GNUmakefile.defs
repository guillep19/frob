#############################################################################
#   $Source: /afs/cs.cmu.edu/project/TCA/Master/tcaV8/tcm/etc/GNUmakefile.defs,v $
# $Revision: 1.18 $
#     $Date: 2009/01/15 17:00:03 $
#   $Author: reids $
#    $State: Exp $
#   $Locker:  $
#
# PROJECT:	Task Control Architecture.
#
# FILE:		GNUmakefile.defs
#
# DESCRIPTION:
#	This file should be included at the begining of the prototypical
#	Makefile.  It provides a set of "standard" and useful defines.
#
# Copyright (c) 2008, Carnegie Mellon University
#     This software is distributed under the terms of the 
#     Simplified BSD License (see tcm/LICENSE.TXT)
#
# HISTORY:
#
# $Log: GNUmakefile.defs,v $
# Revision 1.18  2009/01/15 17:00:03  reids
# Released under simplified BSD open source license
#
# Revision 1.17  2008/07/16 06:16:41  reids
# Updates for newer compiler
#
# Revision 1.16  2003/04/17 23:40:58  da0g
# Threads library directory can be OS-specific.
#
# Revision 1.15  2003/01/29 20:29:11  da0g
# Added support for threads vs THREADS directory hierarchy.
#
# Revision 1.14  2002/06/26 14:40:46  reids
# Default now not to compile with -g option
#
# Revision 1.13  2002/06/19 13:42:04  reids
# Updated for compilation on RH 7.2
#
# Revision 1.12  2002/05/16 15:05:54  reids
# Fixed makefile to handle new location of IPC library
#
# Revision 1.11  2002/03/22 02:21:50  da0g
# IPC_DIR and THREADS_DIR can now be obtained from the environment (setenv)
#
# Revision 1.10  2001/10/23 22:56:27  da0g
# Added Threading support
#
# Revision 1.9  2001/03/02 16:03:12  reids
# Add RedHat specific defines to the cmmpilation.
#
# Revision 1.8  2000/05/30 15:53:35  reids
# Changed from /usr/bin/g++ to g++
#
# Revision 1.7  1999/08/05 17:21:01  reids
# Added ability to compile distributed test files with either IPC or TCA
#   communication packages.
#
# Revision 1.6  98/08/05  10:55:13  reids
# Need to use /usr/bin/g++ on Linux (for now), since it won't compile
#    with version 2.8 of g++.
# 
# Revision 1.5  98/05/25  15:30:30  reids
# Removed references to PROJECT_DIR.
# 
# Revision 1.4  98/03/18  14:45:22  reids
# Change to support Solaris.
# 
# Revision 1.3  98/03/06  12:40:49  reids
# Modifications to support Solaris (at least, the Solaris at FRC)
# 
# Revision 1.2  98/01/29  17:58:43  reids
# Move to use gcc 2.7.2, rather than 2.6 (used by RTI)
# 
# Revision 1.1  97/11/21  14:06:02  reids
# First release of TCM -- seems to be a stable version
# 
# Revision 1.17  1996/05/07  16:47:06  rich
# Changes for clisp.
#
# Revision 1.16  1996/03/02  03:20:04  rich
# Options to use purify.  Use PURIFY=1 on the gmake command line.
#
# Revision 1.15  1996/02/12  01:09:25  rich
# TCA->tca.
#
# Revision 1.14  1996/02/12  00:53:25  rich
# Get VX works compile to work with GNUmakefiles.
#
# Revision 1.13  1996/02/11  21:34:33  rich
# Updated GNUmakefiles for faster complilation.  Use FAST_COMPILE=1 for
# routine recompiles.
#
# Revision 1.12  1996/02/10  23:34:44  rich
# Make lib_dep evaluate after overrides.
#
# Revision 1.11  1996/02/10  16:48:16  rich
# Add more warning messages to compiles.
#
# Revision 1.10  1996/01/08  21:11:30  rich
# Fixed problem with creating directories on afs.
#
# Revision 1.9  1995/12/17  20:20:24  rich
# Fixed debug flags.
#
# Revision 1.8  1995/12/15  01:20:08  rich
# Reduce size of the include path.
#
# Revision 1.7  1995/10/25  22:43:04  rich
# Fixed problem with using a non-afs directory on a machine with afs.
# This was caused by a new release of the afs program "fs".
#
# Revision 1.6  1995/08/05  18:10:15  rich
# Reordered dbmalloc library so that it works on linux.
#
# Revision 1.5  1995/07/26  20:40:34  rich
# Fixed ranlib of .so. files and flags for .cc files.
#
# Revision 1.4  1995/07/25  20:07:48  rich
# Changes for NeXT machine (3.0).
#
# Revision 1.3  1995/07/12  04:53:03  rich
# Release of 8.0.
#
# Revision 1.2  1995/07/10  16:15:09  rich
# Interm save.
#
# Revision 1.1  1995/07/08  17:50:22  rich
# Linux Changes.  Also added GNUmakefile.defs.
#
#
#############################################################################

.KEEP_STATE:

#############################################################################
# Site Configuration Macros
#############################################################################

PROJECT		= tcm
FTP_DIR		= 
LISP_INC_DIR	= /usr/misc/.allegro/lib/misc
DBMALLOC_DIR	= 

#############################################################################
# Machine/OS configuration.
#############################################################################

# For most machines, this gets a string that can be used to determine
# the machine.
ifndef THIS_OS
THIS_OS := $(shell uname)
THIS_MACHINE := $(shell uname -m)
ifndef FAST_COMPILE
THIS_RELEASE := $(shell uname -r)
THIS_HOST := $(shell hostname)
endif
endif

#this is needed to distinquish SunOS from Solaris
ifndef FAST_COMPILE
ifeq ($(shell uname),SunOS) 
ifeq ($(sort 5.0 $(THIS_RELEASE)),5.0 $(THIS_RELEASE))
THIS_OS := Solaris
endif
endif
endif

#############################################################################
# Release configuration.
#############################################################################

#############################################################################
# CVS configuration.
#############################################################################

ifndef IS_AFS
ifndef FAST_COMPILE
CVS_BIN 	:= $(shell if (cat /usr/local/bin/cvs > /dev/null 2> /dev/null); then echo "/usr/local/bin"; else echo "/usr/bin"; fi )

# set AFS to "afs" if the system is installled in an afs file system.
FS_FILE := $(shell ls /usr/vice/bin/fs /usr/local/bin/fs 2>/dev/null | grep -v "No such file" | head -1)
AFS_SERVER := $(shell $(FS_FILE) whereis 2>/dev/null)
ifeq ($(AFS_SERVER),)
IS_AFS = /bin/cat /doesNotExist 2>/dev/null
else
IS_AFS = echo "Using AFS"
endif
AFS_TYPE := $(shell $(FS_FILE) sysname | sed -e s/\'// | sed -e s/\'// | awk '{print $$4}')
endif
endif

# places where files live, relative to the makefile :
BDIR    = bin
LDIR    = lib
ODIR    = obj
LODIR   = lispObj
VODIR   = vxObj
SODIR   = sharedObj
PWD 	:= $(shell /bin/pwd)
ifndef FAST_COMPILE
SYNC_FILE := $(shell ls $(BASE_DIR)/etc/xSync 2>/dev/null | grep -v "not found" | head -1)
endif

#############################################################################
# Standard directories
#############################################################################

PUBLIC_BIN_DIR		= $(INSTALL_DIR)/bin
PUBLIC_INC_DIR 		= $(INSTALL_DIR)/include
PUBLIC_LIB_DIR		= $(INSTALL_DIR)/lib
PUBLIC_LINT_DIR		= $(INSTALL_DIR)/lib/lint
PUBLIC_MAN_DIR		= $(INSTALL_DIR)/man/man
PUBLIC_DOC_DIR		= $(INSTALL_DIR)/doc

MODULE_INC_DIR		= $(PUBLIC_INC_DIR)/$(MODULE)
MODULE_LIB_DIR		= $(PUBLIC_LIB_DIR)/$(MODULE)
MODULE_LINT_DIR		= $(PUBLIC_LINT_DIR)/$(MODULE)
MODULE_DOC_DIR		= $(PUBLIC_DOC_DIR)/$(MODULE)

INSTALL_OSF1	= installbsd

INSTALL		= $(INSTALL_$(THIS_OS))
ifeq '$(INSTALL)' ""
INSTALL		= install
endif

INS_BIN_FLAGS	= -m 555
INS_LIB_FLAGS	= -m 666
INS_LINT_FLAGS	= -m 444
INS_FTP_FLAGS	= -m 444
ifeq ($(THIS_OS),Solaris)
INS_INC_FLAGS	= -m 444
INS_MAN_FLAGS	= -m 444
INS_DOC_FLAGS	= -m 444
else
INS_INC_FLAGS	= -c -m 444
INS_MAN_FLAGS	= -c -m 444
INS_DOC_FLAGS	= -c -m 444
endif

#USE_RTI_COMPILER = 1
ifdef USE_RTI_COMPILER
ifeq ($(THIS_OS),SunOS)
GCC_EXEC_PREFIX = -B$(RTIHOME)/gnu/$(ARCH)/lib/gcc-lib/sparcSunos4/2.6.2/
else
GCC_EXEC_PREFIX = -B$(RTIHOME)/gnu/$(ARCH)/lib/gcc-lib/$(ARCH)/2.6.2/
endif
CC		= $(RTIHOME)/gnu/$(ARCH)/bin/gcc
CCC		= $(RTIHOME)/gnu/$(ARCH)/bin/g++
CXX		= $(RTIHOME)/gnu/$(ARCH)/bin/g++ $(GCC_EXEC_PREFIX)
else
CC		= gcc
ifeq ($(THIS_OS),Linux)
CCC             = g++
CXX             = g++
else
CCC             = g++
endif
endif

AR		= ar
RANLIB		= ranlib
OS_NO_RANLIB	= IRIX Solaris
ifneq ($(findstring $(THIS_OS),$(OS_NO_RANLIB)),)
NO_RANLIB	= TRUE
endif
ifdef NO_RANLIB
RANLIB		= echo
endif

LINT		= lint
RM		= /bin/rm -f
LD		= ld
LD_SHARED_Solaris= ld -G -dy
LD_SHARED_SunOS	= ld -assert pure-text
LD_SHARED_Linux	= ld -assert pure-text
LD_SHARED	= $(LD_SHARED_$(THIS_OS))
CP		= /bin/cp
CHMOD		= /bin/chmod

#############################################################################
# Program Configuration Macros
#############################################################################

#
# Create the flags sent to the C compiler.  Note the following can be
# used on the command line to gmake:
# `DEBUG=DEBUG' : turns on cflags for debugging
# `DEBUG=TEST'  : turn on compilation for test purposes.
# `CFLAG_EXT="-yourFlags"' : can set your own flags.
# You can also override the default DEFINES with DEFINES="-DMYDEFINE"
#

INC_PATH_OSF1	= -I/usr/local/include
INC_PATH_Mach	= 
INC_PATH_SunOS	= -I/usr/local/include -I/usr/openwin/include
INC_PATH_Solaris	= -I/usr/local/include -I/usr/openwin/include
INC_PATH_Linux	= -I/usr/include/bsd
INC_PATH_DBMALLOC= -I$(DBMALLOC_DIR)/include
INC_PATH	= -I. -I$(PUBLIC_INC_DIR) \
		$(INC_PATH_$(THIS_OS)) $(INC_PATH_$(DBMALLOC))

ifndef IPC_DIR
  ifdef BASE_IPC_DIR
      IPC_DIR           = $(BASE_IPC_DIR)
  else
    ifdef BASE_ROOT_DIR
      IPC_DIR           = $(BASE_ROOT_DIR)/ipc
    else
      IPC_DIR		= $(HOME)/code/ipc
    endif
  endif
endif

ifndef THREADS_DIR
  ifdef BASE_THREADS_DIR
      THREADS_DIR       = $(BASE_THREADS_DIR)
  else
    ifdef BASE_ROOT_DIR
      THREADS_DIR       = $(BASE_ROOT_DIR)/$(shell if [ ! -d $(BASE_ROOT_DIR)/threads -a -d $(BASE_ROOT_DIR)/THREADS ]; then echo "THREADS"; else echo "threads"; fi)
    else
      THREADS_DIR	= $(HOME)/code/THREADS
    endif
  endif
endif

ifndef THREADS_INCLUDE_DIR
  THREADS_INCLUDE_DIR = $(THREADS_DIR)
  export THREADS_INCLUDE_DIR
endif

ifndef THREADS_LIBRARY_DIR
  ifdef THREADS_USE_SINGLE_DIR
    THREADS_LIBRARY_DIR = $(THREADS_DIR)/lib
  else
    THREADS_LIBRARY_DIR = $(THREADS_DIR)/lib/$(THIS_OS)-$(SUFFIX)
  endif
  export THREADS_LIBRARY_DIR
endif


ifndef TCA_DIR
  TCA_DIR		= $(HOME)/code/tca
endif

INC_PATH		+= -I$(TCA_DIR)/include -I$(IPC_DIR)/include

DEFINES		= 

ifeq ($(THIS_OS),Linux)
# See if this is at release 2.0, or higher
ifeq ($(sort 2.0 $(THIS_RELEASE)),2.0 $(THIS_RELEASE))
DEFINES += -DREDHAT_52
endif
ifeq ($(sort 2.2 $(THIS_RELEASE)),2.2 $(THIS_RELEASE))
DEFINES += -DREDHAT_6
endif
endif

CPPFLAGS	= $(INC_PATH) $(DEFINES)
CFLAGSS_STRIP	= -Xlinker -s
STRIP_BY_DEFAULT= 
ifneq (,$(findstring $(THIS_MACHINE),$(STRIP_BY_DEFAULT)))
STRIP		= STRIP
endif

CFLAGS_RISC	= -G 0
CFLAGS_Intel	= -m486 -fno-builtin -gstabs
CFLAGS_i486	= -m486
CFLAGS_i586	= -m486
CFLAGS_alpha	= 
CFLAGS_sun4c	= 
CFLAGS_sun4m	= 
CFLAGS_Sparc	= 
CFLAGS_IP22	= -g3
CFLAGS_		= 
CFLAGSD_	= -O2
CFLAGSD_DEBUG	= -g -DDEBUG
CFLAGSD_DEBUG3	= -ggdb3 -DDEBUG
CFLAGSD_TEST	= -g -DTEST -O2
CFLAGSD_PROF	= -pg -O2 -static
CFLAGSD_NONE	= -O2
CFLAGSM_DBMALLOC= -DDBMALLOC
CFLAGS_gcc	= -Wall -Wstrict-prototypes -Wnested-externs -Wmissing-prototypes -Wmissing-declarations
#CFLAGS_cc	= -ansi -fullwarn
CFLAGS_cc	= -ansi

CFLAGS		= $(CFLAGS_$(CC)) $(CFLAGSD_$(DEBUG)) \
		  $(CFLAGS_$(THIS_MACHINE)) \
		  $(CFLAGSM_$(DBMALLOC)) $(CFLAGS_EXT)

CCFLAGS	= $(INC_PATH) $(DEFINES) -Wall $(CFLAGSD_$(DEBUG)) \
		$(CFLAGS_$(THIS_MACHINE)) $(CFLAGSM_$(DBMALLOC)) $(CFLAGS_EXT)
CPPFLAGS = $(CCFLAGS) # -fno-implicit-templates

CFLAGS_LISP_Mach	= -DALLEGRO
CFLAGS_LISP_Linux	= -DCLISP
CFLAGS_LISP_Solaris	= -DALLEGRO
CFLAGS_LISP_SunOS	= -DALLEGRO
CFLAGS_LISP = -DLISP $(CFLAGS_LISP_$(THIS_OS))

LIB_PATH_Mach	= 
LIB_PATH_Linux	= -L$(BASE_DIR)/$(LDIR) -L/lib -L/usr/X11R6/lib
LIB_PATH_Solaris= -L$(BASE_DIR)/$(LDIR) -L/usr/local/lib -L/usr/openwin/lib
LIB_PATH_SunOS	= -L$(BASE_DIR)/$(LDIR) -L/usr/local/lib -L/usr/openwin/lib
LIB_PATH_DBMALLOC= -L$(DBMALLOC_DIR)/lib
LIB_PATH	= -L$(PWD) -L./lib -L../lib -L$(PUBLIC_LIB_DIR) -L$(MODULE_LIB_DIR)\
		$(LIB_PATH_$(THIS_OS)) $(LIB_PATH_$(DBMALLOC))

ifdef USE_TCA
LIB_PATH	+= -L$(TCA_DIR)/lib/
COMM_LIBS	= -ltcaInterface -ltca
else
ifeq ($(THIS_OS),Linux)
PERL := perl
LINUX_MAJOR_VERSION_CMD := $(PERL) -e '$$_ = shift @ARGV; ($$major,$$minor,$$patchlevel) = split(/\./,$$_,3); print "$$major.$$minor\n";'
# cut off patch level, keep only major and minor OS version numbers.
SUFFIX := $(shell $(LINUX_MAJOR_VERSION_CMD) $(THIS_RELEASE))
LIB_PATH	+= -L$(IPC_DIR)/lib/$(THIS_OS)-$(SUFFIX)
else
LIB_PATH	+= -L$(IPC_DIR)/lib/$(THIS_OS)
endif
ifdef DISTRIBUTED
COMM_LIBS	= -lipcInterface -lipc
endif
endif

LDFLAGS 	= $(LIB_PATH)
LIBS_DBMALLOC 	= -ldbmalloc
LIBS_Linux	=  -lc
ifneq ($(sort 2.6 $(THIS_RELEASE)),2.6 $(THIS_RELEASE))
LIBS_Linux	+=  -lbsd
endif
LIBS_Solaris	=  -lsocket -lnsl -ldl
LIBRARIES	= -ltcm $(COMM_LIBS) $(LIBS_$(DBMALLOC)) $(LIBS_$(THIS_OS))
DYN_LIBS_Solaris=  -ldl
DYN_LIBRARIES	= $(DYN_LIBS_$(THIS_OS))
CPP_LIBRARIES	= $(LIBRARIES) 

#Create a variable with the path to the libraries for use in depends.
LIBDEP		= $(foreach lib, $(patsubst -l%, lib%.a, $(LIBRARIES)),\
			$(foreach dir, $(patsubst -L%, %,$(LIB_PATH)),\
				$(wildcard $(dir)/$(lib))))

LINTFLAGS	= -abch

ARFLAGS		= rv
 

#
# So is the VX works version.
#

#
# Paths for older versions of vx works.
#

#WORKSHOME = /home/robosun/vw
#WORKSHOME = /usr/vxworks/vx5.0.2b
#WORKSHOME = /usr/vxworks/vx5.1.1
#VX_GCC_EXEC_PREFIX =/home/robosun/gnu/sun4.68k/lib/gcc-
#VX_CC =/home/robosun/gnu/sun4.68k/bin/cc68k
#VX_LD =/home/robosun/gnu/sun4.68k/bin/ld68k
#VX_AR =/home/robosun/gnu/sun4.68k/bin/ar
#VX_RANLIB = /home/robosun/gnu/sun4.68k/bin/ranlib

#
# One set of the following should be uncommented.
#

#For M68K
#WORKSHOME = /usr/vxworks/vx5.2
#VX_GCC_EXEC_PREFIX = /usr/vxworks/gnu/sun4.68k/lib/gcc-lib/m68k-wrs-vxworks/cygnus-2.2.3.1/
#VX_CC = /usr/vxworks/gnu/sun4.68k/bin/cc68k -B$(VX_GCC_EXEC_PREFIX)
#VX_LD = /usr/vxworks/gnu/sun4.68k/bin/ld68k
#VX_AR = /usr/vxworks/gnu/sun4.68k/bin/ar68k
#VX_RANLIB = /usr/vxworks/gnu/sun4.68k/bin/ranlib68k
#VX_FAMILY = MC680X0
#VX_CPU = MC68030
#VX_INC_GNU = -I/usr/vxworks/vxgnu/sun4.68k/lib/gcc-include
#VX_CFLAGS_ARCH =

#For MIPS
WORKSHOME = /usr/vxworks/vx5.2-mips
VX_GCC_EXEC_PREFIX = /usr/vxworks/gnu/sun4.mips/lib/gcc-lib/sdebig/2.4.5/
VX_CC = /usr/vxworks/gnu/sun4.mips/bin/gcc-sde -B$(VX_GCC_EXEC_PREFIX)
VX_LD = /usr/vxworks/gnu/sun4.mips/bin/ld-sde
VX_AR = /usr/vxworks/gnu/sun4.mips/bin/ar-sde
VX_RANLIB = /usr/vxworks/gnu/sun4.mips/bin/ranlib-sde
VX_FAMILY = MIPS
VX_CPU = R4000
VX_INC_GNU = -I/usr/vxworks/gnu/sun4.mips/lib/gcc-include
VX_CFLAGS_ARCH = -G 0

VX_INC=	-I. -I$(WORKSHOME)/h -I/usr/gnu/lib/gcc-include

VX_LIB=	-L. -L$(WORKSHOME)/lib

VX_CDEBUG= -O -g

VX_CFLAGS= $(VX_CDEBUG) -DVXWORKS -DCPU_FAMILY=$(VX_FAMILY) -DCPU=$(VX_CPU) \
	$(VX_INC)

COMPILE.vx=$(VX_CC) $(VX_CFLAGS) -c
LINK.vx=$(VX_LD) -r $(VX_LIB)
ifdef PURIFY
DBMALLOC = 
LINK.c= purify $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) 
endif

#############################################################################
# Default to no src files.
#############################################################################

INCS		=
PRIVATE_INCS	=
SRCS		=
MANS		= 
DOCS		=
MISC		=

# Files to be removed by 'make clean' and 'make realclean'
DELETES		= core \
	  	  $(patsubst %,$(BDIR)/%,$(PUBLIC_BINS))\
		  $(patsubst %,$(LDIR)/%,$(PUBLIC_LIBS))\
		  $(PUBLIC_LINTS) \
		  $(MODULE_LIBS) $(MODULE_LINTS) $(PRIVS) $(OBJS) make.state 
