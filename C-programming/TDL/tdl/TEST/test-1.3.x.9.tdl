/*
 * Copyright (c) 2008, Carnegie Mellon University
 *     This software is distributed under the terms of the 
 *     Simplified BSD License (see tdl/LICENSE.TXT)
 */

#define SERVER_AGENT "ServerAgent"
#define CLIENT_AGENT "ClientAgent"

distributed goal foo(int4 testNumber) with format "{int}"
{
  cout << "TEST foo(): " << testNumber << endl << flush;
}

goal otherTask(int4 testNumber)
{
  cout << "Other: " << testNumber << endl << flush;
}

goal test(int theTest)
{
  cout << "test\n" << flush;

  switch ( theTest )
  {
    case 0:  foo[0][0] on SERVER_AGENT;  break;
    case 1:  foo[0]    on SERVER_AGENT;  break;
    case 2:  foo       on SERVER_AGENT;  break;
    case 3:  w1[0][0]  on SERVER_AGENT;  break;
    case 4:  w1[0]     on SERVER_AGENT;  break;
    case 5:  w1        on SERVER_AGENT;  break;
    case 6:  w0[0]     on SERVER_AGENT;  break;
    case 7:  w0        on SERVER_AGENT;  break;
  }

  otherTask disable handling for 1.0 after foo[0][0] completed;

  for ( int4 i=0; i<1; i++ )
  {
    w0: with ( parallel )
    {
      for ( int4 j=0; j<1; j++ )
      {
	w1: with ( parallel )
	{
	  spawn foo(theTest);
	}
      }
    }
  }
  spawn otherTask(theTest);
}


void
clientSide( u_int4 theProcessIndex )
{
  MARKUSED ( theProcessIndex );
  cout << "clientSide/stdout\n" << flush;
  cerr << "clientSide/stderr\n";
  TDL_Initialize ( FALSE, CLIENT_AGENT );
  sleep(2);
  for ( int4 i = 0;  i < 8;  i++ )
  {
    SPAWN test(i) with WAIT;
  }
  sleep(1);
  cout << "clientSide ending.\n";
}

void
serverSide ( u_int4 theProcessIndex )
{
  MARKUSED ( theProcessIndex );
  cout << "serverSide/stdout\n" << flush;
  cerr << "serverSide/stderr\n";
  TDL_Initialize ( SERVER_AGENT, FALSE );
  sleep(1);
  TCM_ProcessAgenda(TRUE, 14000);
  cout << "serverSide ending.\n";
}


int
main ( int argc, char * argv[] )
{
  TDL_ForkChildren ( serverSide, clientSide, 15000, 999,
		     TO_BOOLEAN ( argc > 1 ) );
}

