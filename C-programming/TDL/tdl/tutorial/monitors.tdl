/*****************************************************************************
 * PROJECT: TDL Tutorial
 *
 * (c) Copyright 2001 Reid Simmons. All rights reserved.
 * (c) Copyright 1994 Richard Goodwin and Reid Simmons. All rights reserved.
 *
 * FILE: monitors.tdl
 *
 * DESCRIPTION:	TDL module that illustrates use of monitors.
 *
 *              Reimplements the guarded move command using a bounded
 *  		move and a polling monitor.
 *
 *		In addition to including all the goals and commands that
 *		are implemented in taskTreesConcPlan.tdl,
 *		this file also implements the "GuardedMoveMonitor" that 
 *		periodically checks the sonar values and issues a stop command
 *		when the robot gets too close to an obstacle.
 *
 *  		This is a stand-alone module.  
 *  		The command line options are:
 *		    monitors <numSides> <length> <range> <period>,
 *		where "numSides" is an integer greater than 2, and "length"
 *		is a positive real.  The "stopRange" argument is passed
 *		to the guarded move command, and indicates the range at 
 *		which to stop before objects, and "period" is how often to
 *		poll the sonars (in milliseconds).
 *
 *		If the command line options are not given, the defaults
 *		are used (numSides=3, length=100.0 cms, stopRange = 25.0 cms, 
 *  		period = 250 millisecond).
 *
 *  		To run this example (on Linux):
 *  		  1. central -lmdsi
 *  		  2. simulator/simulator sim.param -g
 *  		  3. monitors 4 100
 *		The "-g" option tells the simulator not to use its own 
 *		guarded moves; The "4 100" tells the robot to go in a square,
 *		which in this case will lead to the monitoring triggering
 *		and stopping the current move.  Note that there is no error
 *		handling here -- that is dealt with in exceptions.tdl
 *
 * $Source: /afs/cs.cmu.edu/project/TCA/Master/tcaV8/tutorial/simulator/monitors.tdl,v $ 
 * $Revision: 1.6 $
 * $Date: 1996/08/05 16:10:22 $
 * $Author: rich $
 *
 * REVISION HISTORY:
 *
 * $Log: monitors.tdl,v $
 *****************************************************************************/

#include "simCommands.h"
#include "simMessages.h"
#include "monitors.h"

/* Defaults used for the command line options */
#define NUMSIDES_DEFAULT 3
#define LENGTH_DEFAULT   100.0 /* cms */
#define RANGE_DEFAULT     30.0 /* cms */
#define PERIOD_DEFAULT    250  /* msecs */

int monitorPeriodGlobal = PERIOD_DEFAULT;

/*-------------------------- Exceptions that can arise ----------------------*/

Exception Malformed_Shape();
Exception GuardedMove_Failure(CMS distanceLeft);

/*-------------------------- Turn Command ---------------------------*/

static void turnCmdHandler (MSG_INSTANCE ipcRef, void *data, void *clientData)
{
  TCM_Task_Tree_Ref *tdlRefPtr = (TCM_Task_Tree_Ref *)clientData;
  
  if (!isSuccess(ipcRef)) {
    FAILURE_TYPE failure;
    IPC_unmarshallData(IPC_msgInstanceFormatter(ipcRef), data, &failure,
		       sizeof(failure));
    cerr << "WARNING: Unhandled turn failure: " << failure.failure << endl;
    IPC_freeDataElements(IPC_msgInstanceFormatter(ipcRef), &failure);
  }
  TDL_RESUME_Turn(*tdlRefPtr);
  IPC_freeByteArray(data);
  delete tdlRefPtr;
}

Command Turn (DEGREES angle)
{
  cout << "Turn of " << angle << endl;
  sendSimCommand(TURN_COMMAND, &angle, turnCmdHandler, TDL_REF(THIS));
  POSTPONE;
}
Resume Turn (void)
{
  cout << "Turn completed" << endl;
}

/*----------------------- Guarded Move Command ------------------------*/

static void boundedMoveCmdHandler (MSG_INSTANCE ipcRef, void *data,
				   void *clientData)
{
  TCM_Task_Tree_Ref *tdlRefPtr = (TCM_Task_Tree_Ref *)clientData;
  
  if (!isSuccess(ipcRef)) {
    FAILURE_TYPE failure;
    IPC_unmarshallData(IPC_msgInstanceFormatter(ipcRef), data, &failure,
		       sizeof(failure));
    cerr << "WARNING: Unhandled bounded move failure: " << failure.failure
	 << endl;
    IPC_freeDataElements(IPC_msgInstanceFormatter(ipcRef), &failure);
  }
  TDL_RESUME_BoundedMove(*tdlRefPtr);
  IPC_freeByteArray(data);
  delete tdlRefPtr;
}

Command BoundedMove (CMS distance)
{
  BOUNDED_MOVE_COMMAND_TYPE boundedMove = distance;
  
  cout << "BoundedMove of " << distance << endl;
  sendSimCommand(BOUNDED_MOVE_COMMAND, &boundedMove,
		 boundedMoveCmdHandler, TDL_REF(THIS));
  POSTPONE;
}
Resume BoundedMove (void)
{
  cout << "Bounded move completed" << endl;
}

Command GuardedMove (CMS distance, CMS stopRange)
{
  cout << "GuardedMove of " << distance << endl;
  spawn GuardedMoveMonitor(distance, stopRange)
    with terminate at BoundedMove completed;
  spawn BoundedMove(distance);
}

/*-------------------------- MoveTurn ---------------------------*/

Goal MoveTurn (CMS distance, DEGREES angle, CMS stopRange)
{
  cout << "Handling the " << TCM_NodeName(TDL_REF(THIS)) << " message" << endl;

  cout << "  Planning ... please Wait" << endl;
  /* Similar to "sleep(3)", but allows for events to be handled while waiting */
  TCM_ProcessAgenda(TRUE, 3000); /* Simulate planning time */
  spawn GuardedMove(distance, stopRange);
  spawn Turn(angle) with serial;
}


/*----------------------- ShapeGoal ------------------------

	The angle to turn for the polygonal shape is determined as follows:
   A polygon of N sides has 180*(N-2) total interior angles, and thus
   180-360/N for each interior angle.  The exterior angle (which is the
   angle needed) is 180-interior angle, therefore, the angle to turn
   is simply 360/N.

----------------------------------------------------------------------------*/

Goal ShapeGoal (int numSides, CMS length, CMS stopRange)
{
  DEGREES angle;

  cout << "Handling the " << TCM_NodeName(TDL_REF(THIS)) << " message" << endl;
  if ((numSides < 3) || (length <= 0.0)) {
    cerr << "  Failure: Malformed Shape (" << numSides << ", " << length
	 << ")" << endl;
    FAIL Malformed_Shape();
  } else {
    angle = (int)(0.5 + 360/numSides);
    cout << "  Each side is " << length << " cms; With interior angles of " 
	 << 180-angle << endl;

    // The "with" statement applies to all the MoveTurn goals spawned within
    //   the "for" loop (except it has no affect on the first iteration, since 
    //   there is no "previous")
    // "sequential achievement" means execute any commands in the subtrees
    //   of the MoveTurn goals one after another.
    // "sequential expansion" means do not expand one MoveTurn goal until
    //   the previous one has been completely expanded (but not necessarily
    //   after it has been achieved).
    // Thus, the two together enable expansion to be done concurrently with
    //   execution, making overall completion time much shorter than if the
    //   goals had been serialized (as in taskTrees.tdl).
    with (sequential achievement previous, sequential expansion previous) {
      for (int i=0; i<numSides; i++) {
	spawn MoveTurn(length, angle, stopRange);
      }
    }
  }
}

/*-------------------------- GuardedMoveMonitor ---------------------------

   This monitor does the same thing as the simulator's "guarded move" 
   command (in conjunction with the simulator's "bounded" move).
   It periodically checks the sonar readings for objects coming within range,
   and stops the robot in such situations.

   The data is the distance to move and the range at which to stop 
   for obstacles.  The polling frequency is in milliseconds and is set using a
   global variable.  It could also be overridden when the monitor is spawned.

   Take sonar readings from +/- 45 degrees: if readings are less than
   "stopRange", stop the robot and trigger the monitor (to complete it). 

----------------------------------------------------------------------------*/

Monitor GuardedMoveMonitor (CMS distance, CMS stopRange)
  PERIOD monitorPeriodGlobal/1000.0, MAXIMUM TRIGGER 1
{
  SONAR_SCAN_VAR_QUERY_TYPE sonarQuery;
  SONAR_SCAN_VAR_REPLY_PTR  sonarReplyPtr;
  DISTANCE_MOVED_REPLY_PTR  distanceMovedPtr;
  CMS min=1000.0;

  cout << "GuardedMoveMonitor invoked: "; cout.flush();

  sonarQuery.startSonar = -45/15 + 24; /* -45 degree sonar */
  sonarQuery.endSonar   =  45/15;      /* +45 degree sonar */
  if (IPC_queryResponseData(SONAR_SCAN_VAR_QUERY, &sonarQuery, 
			    (void **)&sonarReplyPtr, 1000) == IPC_OK) {
    for (int i=0; i<sonarReplyPtr->numItems; i++) {
      if (sonarReplyPtr->sonarData[i] < min)
	min = sonarReplyPtr->sonarData[i];
    }
    IPC_freeData(IPC_msgFormatter(SONAR_SCAN_REPLY), sonarReplyPtr);
    if (min <= stopRange) {
      cout << "Sonar reading " << min << " is within stopping range ("
	   << stopRange << ")" << endl;

      TRIGGER(); // Trigger the monitor, to indicate that it is completed.

      cout << "  Stopping motion" << endl;
      IPC_publish(STOP_COMMAND, 0, NULL);

      /* Get distance travelled from move and return as failure data */
      IPC_queryResponseData(DISTANCE_MOVED_QUERY, NULL,
			    (void **)&distanceMovedPtr, IPC_WAIT_FOREVER);
      cout << "  Raising exception: Moved only " << *distanceMovedPtr << endl;

      FAIL GuardedMove_Failure(distance - *distanceMovedPtr);
    } else {
      cout << "OK" << endl;
    }
  }
}

static void addIpcEventHandlers (void); // Forward Reference

static void ipcMessageHandler (int sd, const void *dummy)
{
  IPC_listenClear(0);
  addIpcEventHandlers();
}

static void addIpcEventHandlers (void)
{
  fd_set ipcFds = IPC_getConnections();
  static fd_set currentIpcFds;
  static BOOLEAN firstTime = TRUE;

  if (firstTime) {
    FD_ZERO(&currentIpcFds);
    firstTime = FALSE;
  }

  for (int i=0; i<FD_SETSIZE; i++) {
    if (FD_ISSET(i, &ipcFds) && !FD_ISSET(i, &currentIpcFds)) {
      TCM_AddExternalEvent(i, ipcMessageHandler, NULL);
    } else if (!FD_ISSET(i, &ipcFds) && FD_ISSET(i, &currentIpcFds)) {
      TCM_RemoveExternalEvent(i);
    }
  }
  currentIpcFds = ipcFds;
}


/*----------------------- main ------------------------
  TASK_TREES module: create and execute a task tree for moving the robot
  in a given shape.

  Command line options are: monitors <numSides> <length> <stopRange> <period>,
  where "numSides" is an integer greater than 2, "length" is a positive real,
  "stopRange" is the nominal stopping distance for guarded move, and "period"
  is the activation frequency of the guarded move monitor.
  If the command line options are not given, the defaults (numSides=3, 
  length=100.0, stopRange=25.0, period=250) are used.  Units are in cms,
  except for "period" which is in milliseconds.

  The command line option "-h" provides a help message.
----------------------------------------------------------------------------*/
int main (int argc, char **argv)
{
  int numSides;
  CMS length;
  CMS stopRange;

  if (argc >= 2 && !strcmp(argv[1], "-h")) {
    cerr << "Usage: " << argv[0] << " <numSides> <length> <stopRange> <period>"
	 << endl;
    exit(0);
  }

  monitorPeriodGlobal = (argc >= 5 ? atoi(argv[4]) : PERIOD_DEFAULT);
  stopRange = (argc >= 4 ? (CMS)atof(argv[3]) : RANGE_DEFAULT);
  length    = (argc >= 3 ? (CMS)atof(argv[2]) : LENGTH_DEFAULT);
  numSides  = (argc >= 2 ? atoi(argv[1]) : NUMSIDES_DEFAULT);

  TCM_Initialize();
  TDL::setLogStream ("/dev/null");
  TCM_SetTerminalLoggingOptions(Log_None);

  IPC_connect("MONITORS");
  addIpcEventHandlers();

  ShapeGoal(numSides, length, stopRange);

  return 0;
}
