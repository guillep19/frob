module Parser where

import UU.Parsing
import UU.Scanner
import Lexer
import AttributeGrammar

type TokenParser a = Parser Token a

-- Parser with starting nonterminal Root
-- Semantic functions generated by UUAG
pRoot :: TokenParser Root
pRoot
  = (\x y -> Root_Root x y) <$> pDecls <*> pDodecls

pDecls :: TokenParser Decls
pDecls
  = pList pDecl

pDecl :: TokenParser Decl
pDecl
  = (\x xs _ y -> Decl_Function x xs y) <$> pVarid <*> pArgs <*> pKey "=" <*> pExpr
    <|> (\x _ y -> Decl_Const x y) <$> pConid <*> pKey "=" <*> pExpr

pArgs :: TokenParser [String]
pArgs
  = pList pVarid

pExpr :: TokenParser Expr
pExpr
  = pAdd
  <|> pIfExpr

pIfExpr :: TokenParser Expr
pIfExpr
  = (\_ cond _ t _ e -> Expr_If cond t e) <$> pKey "if" <*> pExpr <*> pKey "then" <*> pExpr <*> pKey "else" <*> pExpr

pAdd :: TokenParser Expr
pAdd
  = pFactor
  <|> (\x _ y -> Expr_Add x y) <$> pFactor <*> pKey "+" <*> pAdd
  <|> (\x _ y -> Expr_Sub x y) <$> pFactor <*> pKey "-" <*> pAdd
  <|> (\x _ y -> Expr_Cmp x y) <$> pFactor <*> pKey "<" <*> pExpr
  <|> (\x _ y -> Expr_Cmp x y) <$> pFactor <*> pKey ">" <*> pExpr
  <|> (\x _ y -> Expr_Cmp x y) <$> pFactor <*> pKey "<=" <*> pExpr
  <|> (\x _ y -> Expr_Cmp x y) <$> pFactor <*> pKey ">=" <*> pExpr
  <|> (\x _ y -> Expr_Cmp x y) <$> pFactor <*> pKey "==" <*> pExpr
  <|> (\x _ y -> Expr_Cmp x y) <$> pFactor <*> pKey "/=" <*> pExpr
  <|> (\x _ y -> Expr_BinBool x y) <$> pFactor <*> pKey "and" <*> pExpr
  <|> (\x _ y -> Expr_BinBool x y) <$> pFactor <*> pKey "or" <*> pExpr

pFactor :: TokenParser Expr
pFactor
  = pTerm
  <|> (\x _ y -> Expr_Times x y) <$> pTerm <*> pKey "*" <*> pFactor
  <|> (\x _ y -> Expr_Div x y) <$> pTerm <*> pKey "/" <*> pFactor

pTerm :: TokenParser Expr
pTerm
  = (\x -> Expr_Var x) <$> pVarid
    <|> (\x -> Expr_Const x) <$> pConid
    <|> (\x -> Expr_Int $ read x) <$> pInteger16
    <|> (\_ x _ -> x) <$> pKey "(" <*> pExpr <*> pKey ")"


-- do declarations
--
pDodecls :: TokenParser Dodecls
pDodecls
  = (\_ _ x _ -> x) <$> pKey "do" <*> pKey "{" <*> pList pDodecl <*> pKey "}"

pDodecl :: TokenParser Dodecl
pDodecl
  = (\_ x y -> Dodecl_Output x y) <$> pKey "output" <*> pExpr <*> pVarid
  <|> (\x _ _ y -> Dodecl_Read x y) <$> pVarid <*> pKey "<-" <*> pKey "read" <*> pExpr
  <|> (\x _ _ f s -> Dodecl_Lift x f s) <$> pVarid <*> pKey "<-" <*> pKey "lift" <*> pVarid <*> pVarid
  <|> (\x _ _ f s1 s2 -> Dodecl_Lift2 x f s1 s2) <$> pVarid <*> pKey "<-" <*> pKey "lift2" <*> pVarid <*> pVarid <*> pVarid
  <|> (\x _ _ f v s -> Dodecl_Folds x f v s) <$> pVarid <*> pKey "<-" <*> pKey "folds" <*> pVarid <*> pExpr <*> pVarid
