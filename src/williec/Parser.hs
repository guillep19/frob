module Parser where

--import Text.ParserCombinators.UU.Core
--import Text.ParserCombinators.UU.Derived
import Text.ParserCombinators.UU.Utils
--import Text.ParserCombinators.UU.BasicInstances

import UU.Parsing
import UU.Scanner.TokenParser
import UU.Scanner.GenTokenOrd()
import UU.Scanner.GenTokenSymbol()
import UU.Scanner.TokenShow()
import UU.Scanner.Position
import Control.Monad

import AttributeGrammar
import Tokens

type Pars a = Parser Tok a

-- Parser with starting nonterminal Root
-- Semantic functions generated by UUAG
pRoot :: Pars T_Root
pRoot
  = sem_Root_Root <$> pDecls

pDecls :: Pars T_Decls
pDecls
  = pFoldr_ng (sem_Decls_Cons, sem_Decls_Nil) pDecl

pDecl :: Pars T_Decl
pDecl
  =   sem_Decl_Function <$> pStringg <*> pStringg <* pSym T_Eq *> pStringg
  <|> sem_Decl_Const <$> pConst <* pSym T_Eq *> pStringg

pStringg :: Pars String
pStringg = pSucceed "myfruit"

pConst :: Pars String
pConst = constname <$> pSym T_Constant
