imports
{
module AttributeGrammar where
import Env
import Bytecode
}
type Decls = [Decl]
type Dodecls = [Dodecl]


data Expr
  | Var
    name :: {String}
  | Const
    name :: {String}
  | Int
    value :: {Int}
  | If
    cond :: Expr
    then :: Expr
    else :: Expr
  | BinExpr
    op :: {String}
    left :: Expr
    right :: Expr

data Dodecl
  | Read
      name :: {String}
      input :: Expr
  | Output
      output :: Expr
      name :: {String}
  | Lift
      name :: {String}
      function :: {String}
      source :: {String}
  | Lift2
      name :: {String}
      function :: {String}
      source_1 :: {String}
      source_2 :: {String}
  | Folds
      name :: {String}
      function :: {String}
      value :: Expr
      source :: {String}

data Decl
  | Function
      name :: {String}
      args :: {[String]}
      body :: Expr
  | Const
      name :: {String}
      value :: Expr

data Root
  | Root
      decls :: Decls
      dodecls :: Dodecls

deriving * : Show
wrapper Root

-- Shortcut for semantic rules
set All = Root Decls Decl Dodecls Dodecl Expr
-- Code generation

attr All syn code use {++} {[]} :: BC
         syn len use {+} {0} :: Int
         inh pos :: Int
         chn env :: Env
         inh envInh :: Env
         chn labels :: LabelMap
         inh labelMap :: LabelMap

sem Root
  | Root
      lhs.code = @dodecls.code ++ [Thalt] ++ @decls.code
      dodecls.pos = 0
      decls.pos = @dodecls.len + 1
      decls.labels = emptyLabelMap
      decls.labelMap = @decls.labels
      dodecls.labelMap = @decls.labels
      decls.env = emptyEnv
      dodecls.env = emptyEnv
      dodecls.envInh = @dodecls.env

sem Decl
  | Function
      lhs.code = @body.code ++ [Tret]
      lhs.len = @body.len + 1
      lhs.labels = addLabel @name @lhs.pos @lhs.labels
      body.env = addScope @args @lhs.env
  | Const
      lhs.code = @value.code ++ [Tret]
      lhs.len = @value.len + 1
      lhs.labels = addLabel @name @lhs.pos @lhs.labels

sem Dodecl
  | Read
      lhs.env = addFrpId @name @lhs.env
      lhs.code = @input.code ++ [Tread (findFrpId @name @lhs.envInh)]
      lhs.len = @input.len + 1
  | Output
      lhs.code = @output.code ++ [Twrite (findFrpId @name @lhs.envInh)]
      lhs.len = @output.len + 1
  | Lift
      lhs.code = [Tlift {sid=(findFrpId @name @lhs.envInh),
                         source=(findFrpId @source @lhs.envInh),
                         fun=(getLabel @function @lhs.labels)}]
      lhs.len = 3
      lhs.env = addFrpId @name @lhs.env
  | Lift2
      lhs.code = [Tlift2 {sid=(findFrpId @name @lhs.envInh),
                          source1=(findFrpId @source_1 @lhs.envInh),
                          source2=(findFrpId @source_2 @lhs.envInh),
                          fun=(getLabel @function @lhs.labels)}]
      lhs.len = 4
      lhs.env = addFrpId @name @lhs.env
  | Folds
      lhs.code = @value.code ++
                 [Tfolds {sid=(findFrpId @name @lhs.envInh),
                          source=(findFrpId @source @lhs.envInh),
                          fun=(getLabel @function @lhs.labels)}]
      lhs.len = @value.len + 3
      lhs.env = addFrpId @name @lhs.env


sem Expr
  | Var
      lhs.code = [Tload_param (getScopeVar @name @lhs.env)]
      lhs.len = 1
  | Const
      lhs.code = [Tcall {fun=(getLabel @name @lhs.labels)}]
      lhs.len = 2
  | Int
      lhs.code = [Tpush {value=(@value)}]
      lhs.len = 2
  | If
      lhs.code = @cond.code ++ 
                 [Tjump_false (@lhs.pos + @cond.len + 2 +
                                          @then.len + 2)] ++
                 @then.code ++
                 [Tjump (@lhs.pos + @cond.len + 2 +
                                    @then.len + 2 +
                                    @else.len)] ++ 
                 @else.code
      lhs.len = @cond.len + 2 + @then.len + 2 + @else.len
      cond.pos = @lhs.pos
      then.pos = @lhs.pos + @cond.len + 2
      else.pos = @lhs.pos + @cond.len + @then.len + 4
  | BinExpr
      lhs.code = @left.code ++ @right.code ++ [binopToInstr(@op)]
      lhs.len = @left.len + @right.len + 1
      left.pos = @lhs.pos
      right.pos = @lhs.pos + @left.len

sem Decls
  | Cons
      tl.pos = @lhs.pos + @hd.len

sem Dodecls
  | Cons
      tl.pos = @lhs.pos + @hd.len

-------------------------------------------
-- Interface to the haskell world:
--   inh  = Inh_Root { }
--   syn  = wrap_Root sem inh
--   code = code_Syn_Root syn

{
binopToInstr :: String -> OpCode
binopToInstr "+" = Tadd
binopToInstr "-" = Tsub
binopToInstr "*" = Tmul
binopToInstr "/" = Tdiv
binopToInstr ">" = Tcmp_gt
binopToInstr "<" = Tcmp_lt
binopToInstr ">=" = Tcmp_gte
binopToInstr "<=" = Tcmp_lte
binopToInstr "==" = Tcmp_eq
binopToInstr "/=" = Tcmp_neq
binopToInstr "and" = Top_and
binopToInstr "or" = Top_or

unaryOpInstr :: String -> OpCode
unaryOpInstr "not" = Top_not
}
