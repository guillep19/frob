imports
{
module AttributeGrammar where
}
data Decls
  | Cons  hd :: Decl
          tl :: Decls
  | Nil

data Decl
  | Function
      name :: {String}
      args :: {String}
      body  :: {String}
  | Const
      name :: {String}
      value :: {Int}

data Root
  | Root
      decls :: Decls

deriving * : Show
wrapper Root

-- Code generation
attr Root Decls Decl syn code :: String

sem Decl
  | Function
      lhs.code = "fun: " ++ @name ++ "body: TODO" ++ "\n"
  | Const
      lhs.code = "const: " ++ @name ++ "value: \n"

sem Decls
  | Cons
      lhs.code =  @hd.code ++ @tl.code
  | Nil
      lhs.code =  ""

-------------------------------------------
-- Interface to the haskell world:
--   inh  = Inh_Root { }
--   syn  = wrap_Root sem inh
--   code = code_Syn_Root syn
