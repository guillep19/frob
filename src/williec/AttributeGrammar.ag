imports
{
module AttributeGrammar where
}
type Decls = [Decl]
type Dodecls = [Dodecl]

data Expr
  | Var
    name :: {String}
    const :: {String}

data Dodecl
  | Read
      name :: {String}
      input :: Expr

data Decl
  | Function
      name :: {String}
      body :: {String}
  | Const
      name :: {String}
      value :: {String}

data Root
  | Root
      decls :: Decls
      dodecls :: Dodecls

deriving * : Show
wrapper Root

-- Code generation
attr Root Decls Decl Dodecls Dodecl syn code :: String

sem Decl
  | Function
      lhs.code = "[" ++ @name ++ "]:\n " ++ @body ++ "\nret\n"
  | Const
      lhs.code = "const: " ++ @name ++ "value: " ++ @value ++ "\n"

sem Decls
  | Cons
      lhs.code =  @hd.code ++ @tl.code
  | Nil
      lhs.code =  ""

sem Dodecls
  | Cons
      lhs.code = @hd.code ++ @tl.code
  | Nil
      lhs.code = ""

sem Dodecl
  | Read
      lhs.code = "read " ++ @name ++ "input: TODO\n"

sem Root
  | Root
      lhs.code = @decls.code ++ @dodecls.code
-------------------------------------------
-- Interface to the haskell world:
--   inh  = Inh_Root { }
--   syn  = wrap_Root sem inh
--   code = code_Syn_Root syn
