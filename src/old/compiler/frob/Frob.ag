
imports
{
module Main(main) where

import UU.Parsing
import Tokens
import Data
}

{
main :: IO ()
main
  = do args <- getArgs
       if (length args /= 2)
        then putStrLn "usage: frobcc <source> <dest>"
        else let [source,dest] = args
             in compile source dest

compile :: String -> String -> IO ()
compile source dest
  = do input  <- readFile source
       let toks = runScanner source input
       sem <- runParser toks
       let out  = semantics sem
       writeFile dest (pretty $ vlist $ code_Syn_Root out)

runScanner :: String -> String -> [Token]
runScanner filename
  = scanBlock (initPos filename)

scanBlock :: Pos -> String -> [Token]
scanBlock _ s = alexScanTokens s

runParser :: [Token] -> IO Root
runParser
  = parseIOMessage show pRoot

semantics :: Root -> Syn_Root
semantics r
  = wrap_Root (sem_Root r) (Inh_Root {})

