

-- UUAGC 0.9.42.3 (HtmlHS.ag)

{-# LINE 4 "./HtmlHS.ag" #-}

module Main(main) where

import UU.Parsing
import UU.Scanner.Token
import UU.Scanner.TokenParser
import UU.Scanner.GenTokenOrd()
import UU.Scanner.GenTokenSymbol()
import UU.Scanner.TokenShow()
import UU.Scanner.Position
import Data.List
import UU.Pretty
import System.Environment
import System.IO
import Data.Char
{-# LINE 22 "HtmlHS.hs" #-}
{-# LINE 26 "./HtmlHS.ag" #-}

-- Evil, ugly handcrafted scanner.
-- For Haskell-like languages, you can use UU.Scanner (or Alex)
scanBlock :: Pos -> String -> [Token]
scanBlock _ "" = [] 
scanBlock p ('\\' : 'e' : 'n' : 'd' : r)
  = reserved "end" p : scanBlock (advc 4 p) r
scanBlock p ('\\' : 't' : 'o' : 'c' : r)
  = reserved "toc" p : scanBlock (advc 4 p) r
scanBlock p ('\\' : 'i' : 'n' : 'd' : 'e' : 'x' : r)
  = reserved "index" p : scanBlock (advc 6 p) r
scanBlock p1 ('\\' : 'k' : 'e' : 'y' : 'w' : 'o' : 'r' : 'd' : r)
  = let p2 = advc 8 p1
        (p3,r',s) = untilChar True '\\' p2 r
    in reserved "keyword" p1 : valueToken TkString s p2 : scanBlock p3 r'
scanBlock p1 ('\\' : 'p' : 'a' : 'r' : 'a' : 'g' : 'r' : 'a' : 'p' : 'h' : r)
  = let p2 = advc 10 p1
        (p3,r',s) = untilChar True '\\' p2 r
    in reserved "paragraph" p1 : valueToken TkString s p2 : scanBlock p3 r'
scanBlock p1 ('\\' : 'b' : 'e' : 'g' : 'i' : 'n' : '{' : r1)
  = let p2 = advc 7 p1
        (p3,r2,s1) = untilChar False '}' p2 r1
        p4 = adv p3 (head r2)
        r3 = tail r2
    in   reserved "begin" p1 : valueToken TkString s1 p2 : scanBlock p4 r3
scanBlock p ('\\' : r)
  = errToken "Non-command character \\" p : scanBlock (advc 1 p) r
scanBlock p (c : r)
  | isSpace c = scanBlock (adv p c) r
  | otherwise = errToken ("Unexpected character " ++ show c) p : scanBlock (adv p c) r

untilChar :: Bool -> Char -> Pos -> String -> (Pos, String, String)
untilChar eofAllowed c p s
  = let (l,r) = span (/= c) s
    in if null r && not eofAllowed
       then error "Unexpected EOF"
       else (foldl adv p l, r, l)


-- Parser with starting nonterminal Root, mapping to datatype
-- Datatypes generated by UUAG
pRoot :: Parser Token Root
pRoot
  = Root_Root <$> pDocs

pDocs :: Parser Token Docs
pDocs
  = pList pDoc

pDoc :: Parser Token Doc
pDoc
  =   Doc_Section   <$ pKey "begin" <*> pString <*> pDocs <* pKey "end"
  <|> Doc_Paragraph <$ pKey "paragraph" <*> pString <* pKey "end"
  <|> Doc_Toc       <$ pKey "toc"
  <|> Doc_Index     <$ pKey "index"
  <|> Doc_Keyword   <$ pKey "keyword" <*> (trim <$> pString) <* pKey "end"

-- Parser with starting nonterminal Root, mapping to semantics directly
-- Semantic functions generated by UUAG
pRootS :: Parser Token T_Root
pRootS
  = sem_Root_Root <$> pDocsS

pDocsS :: Parser Token T_Docs
pDocsS
  = pFoldr_gr (sem_Docs_Cons, sem_Docs_Nil) pDocS

pDocS :: Parser Token T_Doc
pDocS
  =   sem_Doc_Section   <$ pKey "begin" <*> pString <*> pDocsS <* pKey "end"
  <|> sem_Doc_Paragraph <$ pKey "paragraph" <*> pString <* pKey "end"
  <|> sem_Doc_Toc       <$ pKey "toc"
  <|> sem_Doc_Index     <$ pKey "index"
  <|> sem_Doc_Keyword   <$ pKey "keyword" <*> (trim <$> pString) <* pKey "end"

trim :: String -> String
trim
  = (reverse . trimAtFront . reverse) . trimAtFront
  where trimAtFront = dropWhile isSpace
{-# LINE 103 "HtmlHS.hs" #-}

{-# LINE 297 "./HtmlHS.ag" #-}

main :: IO ()
main
  = do args <- getArgs
       if (length args /= 2)
        then putStrLn "usage: html <source> <dest>"
        else let [source,dest] = args
             in compile source dest

compile :: String -> String -> IO ()
compile source dest
  = do input  <- readFile source
       let toks = runScanner source input
       root <- runParser toks
       let output = pretty $ transform root
       writeFile dest output

compileS :: String -> String -> IO ()
compileS source dest
  = do input  <- readFile source
       let toks = runScanner source input
       sem <- runParserS toks
       let output = pretty $ transformS $ sem
       writeFile dest output

runScanner :: String -> String -> [Token]
runScanner filename
  = scanBlock (initPos filename)

runParser :: [Token] -> IO Root
runParser
  = parseIOMessage show pRoot

runParserS :: [Token] -> IO T_Root
runParserS
  = parseIOMessage show pRootS

transform :: Root -> PP_Doc
transform r
  = html_Syn_Root syn
  where inh = Inh_Root {}
        syn = wrap_Root (sem_Root r) inh

transformS :: T_Root -> PP_Doc
transformS sem
  = html_Syn_Root syn
  where inh = Inh_Root {}
        syn = wrap_Root sem inh

augment :: PP_Doc -> PP_Doc
augment doc
  = "<html lang=\"en\"><head><title>Generated HTML document</title></head><body>" >-< doc >-< "</body></html>"

pretty :: PP_Doc -> String
pretty doc
  = disp doc 10000 ""
{-# LINE 162 "HtmlHS.hs" #-}

{-# LINE 360 "./HtmlHS.ag" #-}

aHref :: PP a => String -> a -> PP_Doc
aHref bookmark txt
  = "<a href=\"#" >|< bookmark >|< "\">" >|< txt >|< "</a>"

aName :: String -> PP_Doc
aName bookmark
  = "<a name=\"" >|< bookmark >|< "\"/>"

li :: PP a => a -> PP_Doc
li txt
  = "<li>" >|< txt >|< "</li>"

ul :: PP a => a -> PP_Doc
ul txt
  = "<ul>" >|< txt >|< "</ul>"

p :: PP a => a -> PP_Doc
p txt
  = "<p>" >|< txt >|< "</p>"

h :: PP a => Int -> a -> PP_Doc
h n title
  = "<h" >|< show n >|< ">" >|< title >|< "</h" >|< show n >|< ">"

hr :: PP_Doc
hr = pp "<hr/>"
{-# LINE 192 "HtmlHS.hs" #-}
-- Doc ---------------------------------------------------------
data Doc = Doc_Section (String) (Docs)
         | Doc_Paragraph (String)
         | Doc_Toc
         | Doc_Index
         | Doc_Keyword (String)
         deriving ( Show)
-- cata
sem_Doc :: Doc ->
           T_Doc
sem_Doc (Doc_Section _title _body) =
    (sem_Doc_Section _title (sem_Docs _body))
sem_Doc (Doc_Paragraph _text) =
    (sem_Doc_Paragraph _text)
sem_Doc (Doc_Toc) =
    (sem_Doc_Toc)
sem_Doc (Doc_Index) =
    (sem_Doc_Index)
sem_Doc (Doc_Keyword _text) =
    (sem_Doc_Keyword _text)
-- semantic domain
type T_Doc = Int ->
             String ->
             Int ->
             ([Int]) ->
             String ->
             PP_Doc ->
             ( Int,PP_Doc,PP_Doc,String,String)
sem_Doc_Section :: String ->
                   T_Docs ->
                   T_Doc
sem_Doc_Section title_ body_ =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _lhsOcount :: Int
              _bodyOcount :: Int
              _context :: String
              _name :: PP_Doc
              _lhsOgathToc :: PP_Doc
              _bodyOleft :: String
              _lhsOleft :: String
              _bodyOright :: String
              _lhsOright :: String
              _lhsOhtml :: PP_Doc
              _bodyOlevel :: Int
              _bodyOprefix :: ([Int])
              _bodyOtoc :: PP_Doc
              _bodyIcount :: Int
              _bodyIgathToc :: PP_Doc
              _bodyIhtml :: PP_Doc
              _bodyIleft :: String
              _bodyIright :: String
              _level =
                  ({-# LINE 155 "./HtmlHS.ag" #-}
                   1 + _lhsIlevel
                   {-# LINE 252 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 172 "./HtmlHS.ag" #-}
                   1 + _lhsIcount
                   {-# LINE 257 "HtmlHS.hs" #-}
                   )
              _bodyOcount =
                  ({-# LINE 173 "./HtmlHS.ag" #-}
                   1
                   {-# LINE 262 "HtmlHS.hs" #-}
                   )
              _prefix =
                  ({-# LINE 190 "./HtmlHS.ag" #-}
                   _lhsIcount : _lhsIprefix
                   {-# LINE 267 "HtmlHS.hs" #-}
                   )
              _context =
                  ({-# LINE 191 "./HtmlHS.ag" #-}
                   concat . intersperse "." . map show . reverse $ _prefix
                   {-# LINE 272 "HtmlHS.hs" #-}
                   )
              _name =
                  ({-# LINE 209 "./HtmlHS.ag" #-}
                   _context     >#< title_
                   {-# LINE 277 "HtmlHS.hs" #-}
                   )
              _tocline =
                  ({-# LINE 210 "./HtmlHS.ag" #-}
                   aHref _context     _name
                   {-# LINE 282 "HtmlHS.hs" #-}
                   )
              _lhsOgathToc =
                  ({-# LINE 211 "./HtmlHS.ag" #-}
                   _tocline     >-< ul _bodyIgathToc
                   {-# LINE 287 "HtmlHS.hs" #-}
                   )
              _bodyOleft =
                  ({-# LINE 229 "./HtmlHS.ag" #-}
                   ""
                   {-# LINE 292 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 230 "./HtmlHS.ag" #-}
                   _context
                   {-# LINE 297 "HtmlHS.hs" #-}
                   )
              _bodyOright =
                  ({-# LINE 245 "./HtmlHS.ag" #-}
                   ""
                   {-# LINE 302 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 246 "./HtmlHS.ag" #-}
                   _context
                   {-# LINE 307 "HtmlHS.hs" #-}
                   )
              _lhsOhtml =
                  ({-# LINE 280 "./HtmlHS.ag" #-}
                   aName _context
                   >-< h _lhsIlevel _name
                   >-<     (if null _lhsIleft then empty else aHref _lhsIleft "left")
                       >#< (if null _lhsIright then empty else aHref _lhsIright "right")
                   >-< _bodyIhtml
                   >-< hr
                   {-# LINE 317 "HtmlHS.hs" #-}
                   )
              _bodyOlevel =
                  ({-# LINE 147 "./HtmlHS.ag" #-}
                   _level
                   {-# LINE 322 "HtmlHS.hs" #-}
                   )
              _bodyOprefix =
                  ({-# LINE 183 "./HtmlHS.ag" #-}
                   _prefix
                   {-# LINE 327 "HtmlHS.hs" #-}
                   )
              _bodyOtoc =
                  ({-# LINE 200 "./HtmlHS.ag" #-}
                   _lhsItoc
                   {-# LINE 332 "HtmlHS.hs" #-}
                   )
              ( _bodyIcount,_bodyIgathToc,_bodyIhtml,_bodyIleft,_bodyIright) =
                  body_ _bodyOcount _bodyOleft _bodyOlevel _bodyOprefix _bodyOright _bodyOtoc
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
sem_Doc_Paragraph :: String ->
                     T_Doc
sem_Doc_Paragraph text_ =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _lhsOhtml :: PP_Doc
              _lhsOgathToc :: PP_Doc
              _lhsOcount :: Int
              _lhsOleft :: String
              _lhsOright :: String
              _lhsOhtml =
                  ({-# LINE 288 "./HtmlHS.ag" #-}
                   p text_
                   {-# LINE 354 "HtmlHS.hs" #-}
                   )
              _lhsOgathToc =
                  ({-# LINE 201 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 359 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 164 "./HtmlHS.ag" #-}
                   _lhsIcount
                   {-# LINE 364 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 221 "./HtmlHS.ag" #-}
                   _lhsIleft
                   {-# LINE 369 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 237 "./HtmlHS.ag" #-}
                   _lhsIright
                   {-# LINE 374 "HtmlHS.hs" #-}
                   )
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
sem_Doc_Toc :: T_Doc
sem_Doc_Toc =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _lhsOhtml :: PP_Doc
              _lhsOgathToc :: PP_Doc
              _lhsOcount :: Int
              _lhsOleft :: String
              _lhsOright :: String
              _lhsOhtml =
                  ({-# LINE 290 "./HtmlHS.ag" #-}
                   h _lhsIlevel "Table Of Contents" >-< _lhsItoc
                   {-# LINE 393 "HtmlHS.hs" #-}
                   )
              _lhsOgathToc =
                  ({-# LINE 201 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 398 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 164 "./HtmlHS.ag" #-}
                   _lhsIcount
                   {-# LINE 403 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 221 "./HtmlHS.ag" #-}
                   _lhsIleft
                   {-# LINE 408 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 237 "./HtmlHS.ag" #-}
                   _lhsIright
                   {-# LINE 413 "HtmlHS.hs" #-}
                   )
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
sem_Doc_Index :: T_Doc
sem_Doc_Index =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _lhsOgathToc :: PP_Doc
              _lhsOhtml :: PP_Doc
              _lhsOcount :: Int
              _lhsOleft :: String
              _lhsOright :: String
              _lhsOgathToc =
                  ({-# LINE 201 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 432 "HtmlHS.hs" #-}
                   )
              _lhsOhtml =
                  ({-# LINE 276 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 437 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 164 "./HtmlHS.ag" #-}
                   _lhsIcount
                   {-# LINE 442 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 221 "./HtmlHS.ag" #-}
                   _lhsIleft
                   {-# LINE 447 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 237 "./HtmlHS.ag" #-}
                   _lhsIright
                   {-# LINE 452 "HtmlHS.hs" #-}
                   )
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
sem_Doc_Keyword :: String ->
                   T_Doc
sem_Doc_Keyword text_ =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _lhsOgathToc :: PP_Doc
              _lhsOhtml :: PP_Doc
              _lhsOcount :: Int
              _lhsOleft :: String
              _lhsOright :: String
              _lhsOgathToc =
                  ({-# LINE 201 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 472 "HtmlHS.hs" #-}
                   )
              _lhsOhtml =
                  ({-# LINE 276 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 477 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 164 "./HtmlHS.ag" #-}
                   _lhsIcount
                   {-# LINE 482 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 221 "./HtmlHS.ag" #-}
                   _lhsIleft
                   {-# LINE 487 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 237 "./HtmlHS.ag" #-}
                   _lhsIright
                   {-# LINE 492 "HtmlHS.hs" #-}
                   )
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
-- Docs --------------------------------------------------------
type Docs = [Doc]
-- cata
sem_Docs :: Docs ->
            T_Docs
sem_Docs list =
    (Prelude.foldr sem_Docs_Cons sem_Docs_Nil (Prelude.map sem_Doc list))
-- semantic domain
type T_Docs = Int ->
              String ->
              Int ->
              ([Int]) ->
              String ->
              PP_Doc ->
              ( Int,PP_Doc,PP_Doc,String,String)
sem_Docs_Cons :: T_Doc ->
                 T_Docs ->
                 T_Docs
sem_Docs_Cons hd_ tl_ =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _tlOright :: String
              _hdOright :: String
              _lhsOright :: String
              _lhsOgathToc :: PP_Doc
              _lhsOhtml :: PP_Doc
              _lhsOcount :: Int
              _lhsOleft :: String
              _hdOcount :: Int
              _hdOleft :: String
              _hdOlevel :: Int
              _hdOprefix :: ([Int])
              _hdOtoc :: PP_Doc
              _tlOcount :: Int
              _tlOleft :: String
              _tlOlevel :: Int
              _tlOprefix :: ([Int])
              _tlOtoc :: PP_Doc
              _hdIcount :: Int
              _hdIgathToc :: PP_Doc
              _hdIhtml :: PP_Doc
              _hdIleft :: String
              _hdIright :: String
              _tlIcount :: Int
              _tlIgathToc :: PP_Doc
              _tlIhtml :: PP_Doc
              _tlIleft :: String
              _tlIright :: String
              _tlOright =
                  ({-# LINE 251 "./HtmlHS.ag" #-}
                   _lhsIright
                   {-# LINE 550 "HtmlHS.hs" #-}
                   )
              _hdOright =
                  ({-# LINE 252 "./HtmlHS.ag" #-}
                   _tlIright
                   {-# LINE 555 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 253 "./HtmlHS.ag" #-}
                   _hdIright
                   {-# LINE 560 "HtmlHS.hs" #-}
                   )
              _lhsOgathToc =
                  ({-# LINE 201 "./HtmlHS.ag" #-}
                   _hdIgathToc >-< _tlIgathToc
                   {-# LINE 565 "HtmlHS.hs" #-}
                   )
              _lhsOhtml =
                  ({-# LINE 276 "./HtmlHS.ag" #-}
                   _hdIhtml >-< _tlIhtml
                   {-# LINE 570 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 164 "./HtmlHS.ag" #-}
                   _tlIcount
                   {-# LINE 575 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 221 "./HtmlHS.ag" #-}
                   _tlIleft
                   {-# LINE 580 "HtmlHS.hs" #-}
                   )
              _hdOcount =
                  ({-# LINE 163 "./HtmlHS.ag" #-}
                   _lhsIcount
                   {-# LINE 585 "HtmlHS.hs" #-}
                   )
              _hdOleft =
                  ({-# LINE 220 "./HtmlHS.ag" #-}
                   _lhsIleft
                   {-# LINE 590 "HtmlHS.hs" #-}
                   )
              _hdOlevel =
                  ({-# LINE 147 "./HtmlHS.ag" #-}
                   _lhsIlevel
                   {-# LINE 595 "HtmlHS.hs" #-}
                   )
              _hdOprefix =
                  ({-# LINE 183 "./HtmlHS.ag" #-}
                   _lhsIprefix
                   {-# LINE 600 "HtmlHS.hs" #-}
                   )
              _hdOtoc =
                  ({-# LINE 200 "./HtmlHS.ag" #-}
                   _lhsItoc
                   {-# LINE 605 "HtmlHS.hs" #-}
                   )
              _tlOcount =
                  ({-# LINE 163 "./HtmlHS.ag" #-}
                   _hdIcount
                   {-# LINE 610 "HtmlHS.hs" #-}
                   )
              _tlOleft =
                  ({-# LINE 220 "./HtmlHS.ag" #-}
                   _hdIleft
                   {-# LINE 615 "HtmlHS.hs" #-}
                   )
              _tlOlevel =
                  ({-# LINE 147 "./HtmlHS.ag" #-}
                   _lhsIlevel
                   {-# LINE 620 "HtmlHS.hs" #-}
                   )
              _tlOprefix =
                  ({-# LINE 183 "./HtmlHS.ag" #-}
                   _lhsIprefix
                   {-# LINE 625 "HtmlHS.hs" #-}
                   )
              _tlOtoc =
                  ({-# LINE 200 "./HtmlHS.ag" #-}
                   _lhsItoc
                   {-# LINE 630 "HtmlHS.hs" #-}
                   )
              ( _hdIcount,_hdIgathToc,_hdIhtml,_hdIleft,_hdIright) =
                  hd_ _hdOcount _hdOleft _hdOlevel _hdOprefix _hdOright _hdOtoc
              ( _tlIcount,_tlIgathToc,_tlIhtml,_tlIleft,_tlIright) =
                  tl_ _tlOcount _tlOleft _tlOlevel _tlOprefix _tlOright _tlOtoc
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
sem_Docs_Nil :: T_Docs
sem_Docs_Nil =
    (\ _lhsIcount
       _lhsIleft
       _lhsIlevel
       _lhsIprefix
       _lhsIright
       _lhsItoc ->
         (let _lhsOgathToc :: PP_Doc
              _lhsOhtml :: PP_Doc
              _lhsOcount :: Int
              _lhsOleft :: String
              _lhsOright :: String
              _lhsOgathToc =
                  ({-# LINE 201 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 653 "HtmlHS.hs" #-}
                   )
              _lhsOhtml =
                  ({-# LINE 276 "./HtmlHS.ag" #-}
                   empty
                   {-# LINE 658 "HtmlHS.hs" #-}
                   )
              _lhsOcount =
                  ({-# LINE 164 "./HtmlHS.ag" #-}
                   _lhsIcount
                   {-# LINE 663 "HtmlHS.hs" #-}
                   )
              _lhsOleft =
                  ({-# LINE 221 "./HtmlHS.ag" #-}
                   _lhsIleft
                   {-# LINE 668 "HtmlHS.hs" #-}
                   )
              _lhsOright =
                  ({-# LINE 237 "./HtmlHS.ag" #-}
                   _lhsIright
                   {-# LINE 673 "HtmlHS.hs" #-}
                   )
          in  ( _lhsOcount,_lhsOgathToc,_lhsOhtml,_lhsOleft,_lhsOright)))
-- Root --------------------------------------------------------
data Root = Root_Root (Docs)
          deriving ( Show)
-- cata
sem_Root :: Root ->
            T_Root
sem_Root (Root_Root _body) =
    (sem_Root_Root (sem_Docs _body))
-- semantic domain
type T_Root = ( PP_Doc)
data Inh_Root = Inh_Root {}
data Syn_Root = Syn_Root {html_Syn_Root :: PP_Doc}
wrap_Root :: T_Root ->
             Inh_Root ->
             Syn_Root
wrap_Root sem (Inh_Root) =
    (let ( _lhsOhtml) = sem
     in  (Syn_Root _lhsOhtml))
sem_Root_Root :: T_Docs ->
                 T_Root
sem_Root_Root body_ =
    (let _bodyOcount :: Int
         _bodyOprefix :: ([Int])
         _bodyOtoc :: PP_Doc
         _bodyOleft :: String
         _bodyOright :: String
         _lhsOhtml :: PP_Doc
         _bodyOlevel :: Int
         _bodyIcount :: Int
         _bodyIgathToc :: PP_Doc
         _bodyIhtml :: PP_Doc
         _bodyIleft :: String
         _bodyIright :: String
         _level =
             ({-# LINE 151 "./HtmlHS.ag" #-}
              1
              {-# LINE 712 "HtmlHS.hs" #-}
              )
         _bodyOcount =
             ({-# LINE 168 "./HtmlHS.ag" #-}
              1
              {-# LINE 717 "HtmlHS.hs" #-}
              )
         _bodyOprefix =
             ({-# LINE 186 "./HtmlHS.ag" #-}
              []
              {-# LINE 722 "HtmlHS.hs" #-}
              )
         _bodyOtoc =
             ({-# LINE 205 "./HtmlHS.ag" #-}
              ul _bodyIgathToc
              {-# LINE 727 "HtmlHS.hs" #-}
              )
         _bodyOleft =
             ({-# LINE 225 "./HtmlHS.ag" #-}
              ""
              {-# LINE 732 "HtmlHS.hs" #-}
              )
         _bodyOright =
             ({-# LINE 241 "./HtmlHS.ag" #-}
              ""
              {-# LINE 737 "HtmlHS.hs" #-}
              )
         _lhsOhtml =
             ({-# LINE 276 "./HtmlHS.ag" #-}
              _bodyIhtml
              {-# LINE 742 "HtmlHS.hs" #-}
              )
         _bodyOlevel =
             ({-# LINE 147 "./HtmlHS.ag" #-}
              _level
              {-# LINE 747 "HtmlHS.hs" #-}
              )
         ( _bodyIcount,_bodyIgathToc,_bodyIhtml,_bodyIleft,_bodyIright) =
             body_ _bodyOcount _bodyOleft _bodyOlevel _bodyOprefix _bodyOright _bodyOtoc
     in  ( _lhsOhtml))